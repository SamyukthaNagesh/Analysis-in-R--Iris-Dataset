#check to make sure you are in the correct directory to save your work
getwd()

#Loding the iris dataset

library(datasets)
data("iris")
summary(iris)
summary(iris$Sepal.Length)
summary(iris$Sepal.Width)
summary(iris$Petal.Length)
summary(iris$Petal.Width)
summary(iris$Species)
attributes(iris)

#came across another dataset called iris3. Is iris3 any different from iris?

summary(iris3)

#finding the names of the columns in the dataset

names(iris)

#convert all the column names to lower case for uniformity 

names(iris)<-tolower(names(iris))

#attaching the dplyr package

install.packages("dplyr")
library(dplyr)

#subset the data for virginica

virginica<-subset(iris, species=="virginica")
head(virginica)
tail(virginica)

#alternately the "filter" command can also be used instead of the subset command
#the syntax: virginica<-filter(iris, species=="virginica")

# selection- Select only required columns

selected1<-select(iris, sepal.length, sepal.width, petal.length, petal.width)
head(selected1)
selected2<-select(iris, sepal.length:petal.width)
identical(selected1,selected2)

# Creating new columns- mutate(), arrange(),filter()

newcolumn<-mutate(iris, petalproduct= petal.length*petal.width)
newcolumn1<-arrange(newcolumn, petal.width)
head(newcolumn1)
newcolumn1
virginica1<-newcolumn1%>% filter(species=='virginica')%>%arrange(sepal.length)
head(virginica1)
virginica1[1:5,]

# Finding the mean and standard deviation

summarise(virginica1, mean.petal.length=mean(petal.length, na.rm = TRUE))
summarise(virginica1, mean.sepal.length=mean(sepal.length, na.rm = TRUE))
summarise(virginica1, sd.petal.length=sd(petal.length, na.rm = TRUE))

# visualizations- Scatter plot and histogram

plot(iris)
plot(iris$sepal.length, iris$sepal.width, xlab = "sepal length", ylab = "sepal width", 
     main = "plot of Iris- Sepal length VS sepal Width")
hist(iris$petal.length, xlab = "sepal length", main="histogram-sepal length")

#using ggplot2

install.packages("ggplot2")
library(ggplot2)
ggplot(iris, aes(x=petal.length, y=sepal.length, colour =species))+ 
  geom_point()+ ggtitle('Comparing Iris species by petal and sepal lengths')

# ggplot(iris, aes(x=petal.width, y=sepal.width, colour =species))+
#   geom_point()+ ggtitle('Comparing Iris species by petal and sepal width')
# ggplot(iris, aes(x=petal.length, y=petal.width, colour =species))+
#   geom_point()+ ggtitle('Comparing Iris species by petal length and width')

#correlation matrix

type<-levels(iris$Species)
print(type[1])
cor(iris[iris$Species==type[1],1:4])

#Normalization- A function to normalize in general

library(class)
normalize<- function(x){
  numerator<- x-min(x)
  denominator<-max(x)- min(x)
  return(numerator/denominator)
}
iris_norm<- as.data.frame(lapply(iris[1:4], normalize))
head(iris_norm)

#Classification using Knn()

set.seed(1234)
index<-sample(2, nrow(iris), replace=TRUE, prob = c(0.67,0.33))
iris.training<-iris[index==1,1:4]
iris.trainLabels<-iris[index==1,5]
print(iris.trainLabels)
iris.test<-iris[index==2, 1:4] 
iris.testLabels<-iris[index==2,5]
print(iris.testLabels)
iris_predict <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
iris_predict
irisTestLabels<-data.frame(iris.testLabels)
merge<- data.frame(iris_predict, irisTestLabels)
names(merge)<-c("Predicted Species", "observed Species")
head(merge)
merge


#output the result of classification
install.packages("gmodels")
library(gmodels)
CrossTable(x=iris.testLabels, y=iris_predict, prop.chisq=FALSE)






